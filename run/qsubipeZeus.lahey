#!/bin/csh
# NOTE: ./qsubipeZeus.lahey4gt1 <argument>: argument should be number of procs!
#
#0:original grid; 1: new_grid20120705
#make sure to check which grid you wish to choose.
set sw_grid = 1
#
if ( $#argv == 0 ) then
  set par = "serial"
  set compute_tasks = 1
# Need at least 2 run tasks to provide enough memory.
  set run_tasks = 2
  set name = ipe_L
else
  set par = "parallel"
  set compute_tasks = $1
  set name = ipe_${compute_tasks}
  set run_tasks = $compute_tasks
  if ( $compute_tasks < 2) then
# Need at least 2 run tasks to provide enough memory.
    set run_tasks = 2
  endif
endif
set  rundir = "${name}_${$}"
mkdir $rundir
echo Created $rundir
cd  $rundir
if ( $par == 'parallel' ) then
  cp ../../bin/ipe_v18.lf95sms.exe .
else
  cp ../../bin/ipe_v18.lf95.exe .
endif
cp ../coef*                    .
cp ../GPTLnamelist             .
cp ../SMSnamelist              .
cp ../IPE.inp.lahey            IPE.inp
cp ../wei96.cofcnts            .
###cp ../stup_ut_rec              .
cp ../qsubipeZeus.lahey        .
cp ../load_balance_groups1     .
#
set GRIDIR=/scratch1/portfolios/NCEPDEV/swpc/noscrub/Naomi.Maruyama/grid
echo GRIDIR $GRIDIR
if ( $sw_grid == 0 ) then
  echo 'original grid'
  ln -s /scratch1/portfolios/NCEPDEV/swpc/noscrub/Naomi.Maruyama/IPEdata/data/ipe_grid .
else if ( $sw_grid == 1 ) then
  echo 'new grid20120705'
  ln -s $GRIDIR/apex/GIP_apex_coords_global_lowres_new20120705         ./ipe_grid
else if ( $sw_grid == 2 ) then
  echo '2Xdynamo grid20120705'
  ln -s $GRIDIR/apex/GIP_apex_coords_global_lowres_new_2dynamo20120709 ./ipe_grid
else if ( $sw_grid == 3 ) then
  echo 'new TILTED DIPOLE grid20120705'
  ln -s $GRIDIR/tldp/GIP_apex_coords_global_lowres_new_tilt20120709    ./ipe_grid
endif
#
# Allow the test suite to override the location of data files via environment
# variable IPEDATA. If present in the environment, IPEDATA will specify the
# location of the test suite's canned data archive; otherwise, the default path
# will be used.
#nm20140207 for continuous runs, set up environment variable before running qsubipeZeus:
# setenv IPEDATA <path to your startup files>
if ( $?IPEDATA ) then
  echo IPEDATA  "$IPEDATA" 
  set DATADIR="$IPEDATA"
else
#20140123 set DATADIR="/scratch2/portfolios/BMC/acb/IPEdata/IPEdata"
  set DATADIR="/scratch1/portfolios/NCEPDEV/swpc/noscrub/Naomi.Maruyama/IPEdata/data"
endif
#
###ln -s $DATADIR/* .
echo "DATADIR for startup files:"  $DATADIR
#nm20130401: modified for continuous run
ln -s $DATADIR/ut_rec   ./stup_ut_rec
set j=0
while ( $j <= 11 )
    echo "symlink $j"
    if ( $j <= 9 ) then
        set flnm  = $DATADIR/plasma0"$j"
        set flnm1 = stup0"$j"
    else
        set flnm  = $DATADIR/plasma"$j"
        set flnm1 = stup"$j"
    endif
    if ( $j == 0 ) then
      echo filename is $flnm $flnm1
    endif
    ln -s $flnm ./$flnm1
    @ j++
end  ###while
#
## sw_neutral=3 in IPE.inp requires input files
set sw_neutral = 1
if ( $sw_neutral == 3 ) then
    set WINDDIR="/scratch1/portfolios/NCEPDEV/swpc/noscrub/Naomi.Maruyama/reu/tmp20130717reu/bkup20140130"
    ln -s $WINDDIR/ut_input    ./ut_input2009017
    ln -s $WINDDIR/wind_input  ./wind_input2009017
endif
#
# Make rundir a full path for runscript
set rundir = $cwd

cat << EOF >! runscript
#!/bin/csh
  cd $rundir
  pwd
  limit
  module purge
  module load lahey
#The following setenv commands are to fix the warning:
# MPI WARNING: Could not allocate an internal buffer in the last 30 seconds
# on rank 1.  Try increasing MPI_BUFS_PER_PROC and/or MPI_BUFS_PER_HOST.
# And speed up the initialization.
  setenv MPI_BUFS_PER_HOST 1024
  setenv MPI_BUFS_PER_PROC 128
  cat /proc/cpuinfo
  if ($par == 'parallel') then
    module load mpt
    set cmd = "time mpiexec_mpt -np $compute_tasks ./ipe_v18.lf95sms.exe"
  else
    set cmd = "time ./ipe_v18.lf95.exe"
  endif
  module list
  echo "running \$cmd" > output
  (\$cmd) >> output

if (\$status != 0) then
  echo ipe failed
  exit 23
else
  echo ipe finished
endif
exit 0
EOF

chmod 755 ./runscript
set queue_time=00:30:00

set QUEUE="batch"

# Allow the test suite to override the batch queue.

if ( $?IPEQUEUE ) then
  set QUEUE="$IPEQUEUE"
endif

set jobid=`qsub -N $name -A gm -q $QUEUE -l procs=$run_tasks -l walltime=$queue_time -j oe ./runscript`

if ( $status != 0 ) then
  echo "qsub failed"
  exit 1
endif

if ( "$jobid" == "" ) then
  echo "Failed to get job ID"
  exit 1
endif
  
echo "The job $jobid has been submitted."

exit 0
