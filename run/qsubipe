#!/bin/bash

# Control variables

sw_grid=0
sw_neutral=1
test=v18

# Functions

compiler_check() {
  test -z "$1" && fail "$0: No list of valid compilers provided."
  test -z "$2" && fail "$0: No compiiler name specified."
  test -z "$3" && fail "$0: No machine name specified."
  echo $1 | grep -q $2 || usage "$scr: Machine $3 supports compilers: $1"
}

fail() {
  test -n "$1" && echo $1
  exit 1
}

function findabove {
  (
    until test -e $1 -o $PWD = "/" ; do cd .. ; done
    test -e $1 || fail "$0: Could not find $1"
    echo $PWD/$1
  )
}

linksafe() {
  test -z "$1" && fail "$0: No target supplied."
  test -e "$1" || fail "$0: No such target: $1."
  test -z "$2" && link="." || link="$2"
  ln -s $1 $link
}

nml() {
  nml=../../tst/nml
  test -x $nml || nml=$(findabove nml)
  echo $nml
}

runscript_trillian() {
  echo "#!/bin/bash -x"
  echo "#PBS -j oe"
  echo "#PBS -l nodes=$(expr $taskreq / 32 + 1):ppn=32"
  echo "#PBS -l walltime=$queue_time"
  echo "#PBS -N $jobname"
  echo "#PBS -o output.batch"
  echo "#PBS -W umask=022"
  echo "export $envvars"
  echo "$($modcmd $machine $compiler)"
  echo "module list"
  echo "cd $PWD"
  echo "time aprun -n $tasks ./$(basename $exe) >output 2>&1 && echo 'ipe finished' && exit 0"
  echo "echo 'ipe failed' && exit 23"
}

runscript_zeus() {
  echo "#!/bin/bash -x"
  echo "#PBS -A $acct"
  echo "#PBS -d $PWD"
  echo "#PBS -j oe"
  echo "#PBS -l procs=$taskreq"
  echo "#PBS -l walltime=$queue_time"
  echo "#PBS -N $jobname"
  echo "#PBS -o output.batch"
  echo "#PBS -q $queue"
  echo "#PBS -W umask=022"
  echo "export $envvars"
  echo "$($modcmd $machine $compiler)"
  echo "module list"
  test $parallelism == parallel && extra="mpiexec_mpt -np $tasks "
  echo "time $extra./$(basename $exe) >output 2>&1 && echo 'ipe finished' && exit 0"
  echo "echo 'ipe failed' && exit 23"
}

usage() {
  test -n "$1" && echo -e "\n$1"
  echo
  echo "USAGE: ipesub <machine> <compiler> <parallelism> [tasks]"
  echo
  echo "Where: machine     is one of: $machines"
  echo "       compiler    is one of: $compilers (valid values depend on <machine>)"
  echo "       parallelism is one of: $parallelisms"
  echo "       tasks       is the number of compute tasks for parallel runs (minimum 2)"
  echo
  exit 1
}

# Set the script name, for use in error messages.

scr=$(basename $0)

# Set up some lists of valid options for error checking.

#compilers="cray intel lahey pgi"
compilers="intel lahey pgi"
machines="trillian zeus"
parallelisms="parallel serial"

# Set variables for command-line arguments.

machine=$1
compiler=$2
parallelism=$3
tasks=$4

# Ensure that mandatory arguments were supplied.

test -z "$machine" -o -z "$compiler" -o -z "$parallelism" && usage

# Error-check the supplied command-line arguments.

echo $machines | grep -q $machine || usage "$scr: Unknown machine '$machine'."
echo $compilers | grep -q $compiler || usage "$scr: Unknown compiler '$compiler'."
echo $parallelisms | grep -q $parallelism || usage "$scr: Unknown parallelism '$parallelism'."
test $parallelism == parallel -a -z "$tasks" && usage "$scr: The <tasks> option is required for parallel runs."
test $parallelism == serial -a -n "$tasks" && usage "$scr: No <tasks> option allowed for serial runs."
test $parallelism == serial -a -n "$COMPARE_VAR" && fail "COMPARE_VAR requires a parallel run."

# Request at least 2 cores to obtain sufficient memory.

test -z "$tasks" && tasks=1
test $tasks -lt 2 && taskreq=2 || taskreq=$tasks

# Handle SMS compare_var option.

if [ -n "$COMPARE_VAR" ]; then
  echo $COMPARE_VAR | grep -Eq "[0-9]+,[0-9]+" || fail "Bad COMPARE_VAR value '$COMPARE_VAR'."
  cv1=$(echo $COMPARE_VAR | cut -d, -f1)
  cv2=$(echo $COMPARE_VAR | cut -d, -f2)
  test $(expr $cv1 + $cv2) -eq $tasks || fail "Sum of COMPARE_VAR values must equal tasks ($tasks)."
fi

# Set variables based on machine and compiler.

case $machine in

  "trillian")
#   compiler_check "cray pgi" $compiler $machine
    compiler_check "pgi" $compiler $machine
    datadir=/mnt/lustre/lus0/space/madden/IPE/data
    envvars="OMP_NUM_THREADS=1"
    inp=IPE.inp
    queue=workq
    queue_cmd=qsub
    winddir=$datadir
    test $parallelism == parallel && queue_time=00:10:00 || queue_time=00:30:00
    case $sw_grid in
      0) gridfile=$datadir/ipe_grid             ;;
      *) fail "$0: Grid ID '$sw_grid' unknown." ;;
    esac
    ;;

  "zeus")
    compiler_check "intel lahey" $compiler $machine
#   acct=swpc
    acct=fim
    datadir=/scratch1/portfolios/NCEPDEV/swpc/noscrub/Naomi.Maruyama/IPEdata/data
    griddir=/scratch1/portfolios/NCEPDEV/swpc/noscrub/Naomi.Maruyama/grid
    queue=batch
    queue_cmd=qsub
    winddir=/scratch1/portfolios/NCEPDEV/swpc/noscrub/Naomi.Maruyama/IPEdata/wind
    test $parallelism == parallel && queue_time=00:20:00 || queue_time=00:30:00
    case $sw_grid in
      0) gridfile=$datadir/ipe_grid                                               ;;
      1) gridfile=$griddir/apex/GIP_apex_coords_global_lowres_new20120705         ;;
      2) gridfile=$griddir/apex/GIP_apex_coords_global_lowres_new_2dynamo20120709 ;;
      3) gridfile=$griddir/tldp/GIP_apex_coords_global_lowres_new_tilt20120709    ;;
      *) fail "$0: Grid ID '$sw_grid' unknown."                                   ;;
    esac
    case $compiler in
      intel)
        envvars="MPI_BUFS_PER_HOST=2048 MPI_BUFS_PER_PROC=256"
        inp=IPE.inp
        ;;
      lahey)
        envvars="MPI_BUFS_PER_HOST=1024 MPI_BUFS_PER_PROC=128"
        inp=IPE.inp.lahey
        ;;
    esac
    ;;

esac

pre=ipe_${test}_${machine}_${compiler}_${parallelism}
exe=../bin/${pre}.exe
test -x $exe || fail "$0: Cannot find executable '$exe'."
test $parallelism == serial && jobname=ipe_${compiler}_s || jobname=ipe_${compiler}_$tasks

# Allow override of internal variables via environment variables (e.g. set by
# the test suite software).

test -n "$IPEDATA" && datadir=$IPEDATA
test -n "$IPEQUEUE" && queue=$IPEQUEUE
test -n "$IPEWIND" && winddir=$IPEWIND

# Create unique run directory and copy/link files into it.

rundir=$(date +%s)_$pre
mkdir $rundir || fail
echo Created run directory: $rundir
cp $inp $rundir/IPE.inp
for x in $exe coef* GPTLnamelist load_balance_groups1 SMSnamelist wei96.cofcnts; do
  cp $x $rundir || fail
done
linksafe $gridfile $rundir/ipe_grid
linksafe $datadir/ut_rec $rundir/stup_ut_rec
for j in $(seq 0 11); do
  test $j -lt 10 && pad=0 || pad=
  linksafe $datadir/plasma${pad}${j} $rundir/stup${pad}${j}
done
if [ $sw_neutral -eq 3 ]; then
  linksafe $winddir/ut_input $rundir/ut_input2009017
  linksafe $winddir/wind_input $rundir/wind_input2009017
fi

# Enter the run directory, edit SMSnamelist, create and submit the run script.

cd $rundir || fail
if [ $parallelism == parallel ]; then
  if [ -n "$COMPARE_VAR" ]; then
    sets=""
    sets+=" -s smsnamelist:compare_var_on=t"
    sets+=" -s smsnamelist:compare_var_ntasks_1=$cv1"
    sets+=" -s smsnamelist:compare_var_ntasks_2=$cv2"
    sets+=" -s smsnamelist:set_process_layout=f"
    jobname+="_cv"
  else
    sets="-s smsnamelist:process_layout=1,$tasks"
  fi
  $(nml) -i SMSnamelist -o SMSnamelist $sets || fail
fi
modcmd=../../src/modcmd # for manual runs
test -x $modcmd || modcmd=../modcmd # for test-suite runs
echo "$(runscript_$machine)" > runscript
chmod 755 runscript
jobid=$($queue_cmd runscript || echo FAIL)
test $jobid == FAIL && fail "$0: Failed to submit job."
echo "The job $jobid has been submitted."
exit 0
